const mikktspace = require('../');
const tape = require('tape');
const path = require('path');
const { NodeIO } = require('@gltf-transform/core');
const { unweld } = require('@gltf-transform/lib');
const { BADFAMILY } = require('dns');

tape('test', async (t) => {
    const io = new NodeIO();
    const doc = await io.read(path.resolve(__dirname, './cube.glb')).transform(unweld());
    const cube = doc.getRoot().listMeshes()[0].listPrimitives()[0];

    const tangentArray = mikktspace.computeVertexTangents(
        cube.getAttribute('POSITION').getArray(),
        cube.getAttribute('NORMAL').getArray(),
        cube.getAttribute('TEXCOORD_0').getArray(),
    );

    t.ok(tangentArray instanceof Float32Array, 'type');
    t.equals(tangentArray.length, TANGENTS_EXPECTED.length, 'length');

    let invalid = [];
    for (let i = 0; i < tangentArray.length; i++) {
        // TODO(cleanup): Should |a| === |b| be required?
        if (Math.abs(tangentArray[i]) !== Math.abs(TANGENTS_EXPECTED[i])) {
            bad.push({actual: tangentArray[i], expected: TANGENTS_EXPECTED[i], index: i});
        }
    }

    t.deepEquals(invalid, [], 'values');
    t.end();
});

const TANGENTS_EXPECTED = new Float32Array([
    0.40824825, 0.81649655, 0.40824825, 1,
    0.40824825, 0.81649655, -0.40824825, 1,
    0.00000000, 1.00000000, 0.00000000, 1,
    0.40824825, 0.81649655, -0.40824825, 1,
    -0.40824825, 0.81649655, 0.40824825, 1,
    0.00000000, 1.00000000, 0.00000000, 1,
    -0.40824825, 0.81649655, 0.40824825, 1,
    -0.40824825, 0.81649655, -0.40824825, 1,
    0.00000000, 1.00000000, 0.00000000, 1,
    -0.40824825, 0.81649655, -0.40824825, 1,
    0.40824825, 0.81649655, 0.40824825, 1,
    0.00000000, 1.00000000, 0.00000000, 1,
    0.40824825, 0.81649655, -0.40824825, -1,
    0.40824825, 0.81649655, 0.40824825, -1,
    0.00000000, 1.00000000, 0.00000000, -1,
    0.40824825, 0.81649655, 0.40824825, -1,
    -0.40824825, 0.81649655, -0.40824825, -1,
    0.00000000, 1.00000000, 0.00000000, -1,
    -0.40824825, 0.81649655, -0.40824825, -1,
    -0.40824825, 0.81649655, 0.40824825, -1,
    0.00000000, 1.00000000, 0.00000000, -1,
    -0.40824825, 0.81649655, 0.40824825, -1,
    0.40824825, 0.81649655, -0.40824825, -1,
    0.00000000, 1.00000000, 0.00000000, -1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    -0.40824825, 0.81649655, 0.40824825, -1,
    -0.40824825, 0.81649655, -0.40824825, -1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.40824825, 0.81649655, -0.40824825, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.40824825, 0.81649655, -0.40824825, 1,
    0.40824825, 0.81649655, 0.40824825, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.40824825, 0.81649655, 0.40824825, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.81649655, 0.40824825, 0.40824825, 1,
    0.81649655, -0.40824825, 0.40824825, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.81649655, -0.40824825, 0.40824825, 1,
    0.81649655, 0.40824825, -0.40824825, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.81649655, 0.40824825, -0.40824825, 1,
    0.81649655, -0.40824825, -0.40824825, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.81649655, -0.40824825, -0.40824825, 1,
    0.81649655, 0.40824825, 0.40824825, 1,
    1.00000000, 0.00000000, 0.00000000, 1,
    0.81649655, -0.40824825, 0.40824825, -1,
    0.81649655, 0.40824825, 0.40824825, -1,
    1.00000000, 0.00000000, 0.00000000, -1,
    0.81649655, 0.40824825, 0.40824825, -1,
    0.81649655, -0.40824825, -0.40824825, -1,
    1.00000000, 0.00000000, 0.00000000, -1,
    0.81649655, -0.40824825, -0.40824825, -1,
    0.81649655, 0.40824825, -0.40824825, -1,
    1.00000000, 0.00000000, 0.00000000, -1,
    0.81649655, 0.40824825, -0.40824825, -1,
    0.81649655, -0.40824825, 0.40824825, -1,
    1.00000000, 0.00000000, 0.00000000, -1,
]);